# -*- coding: utf-8 -*-
"""
Created on Tue Feb 17 21:31:48 2015
@author: andrew_woizesko
"""
###########################################################################
## Imports
###########################################################################

import dill
from conf import settings


###########################################################################
## Event Classifier
###########################################################################

class EventClassifier(object):
    """
    Class that will be used to classify user input
    events. The event classifier will use the model 
    from build.py
    """
    
    def __init__(self, model=None):
        """
        Initialize the event classifier with the model
        created in build.py
        """
        
    		## Get the default model from the settings if it isn't passed in
    	model = model or settings.model
    		
    		## Load the model from the pickle
    	with open(model, 'rb') as pkl:
    		self._classifier = dill.load(pkl)
    			
    
    def classify(self, instance):
        """
        This is the function that will take the user 
        input (instance) and return the probability that the 
        user will encounter a crime on their trip
        """
        		
    	## Use the classifier to predict the probabilities of each crime
    	most_likely = self._classifier.predict(instance)
     
    	return most_likely
    
    def get_model(self):
        """
        returns the model to the user to access all object functionality
        """
        return self._classifier
    

if __name__ == "__main__":
    import numpy as np
    
    classifier = EventClassifier()
    
    #sample data. Most of this will be generated by a form. 
    tests = np.asfarray([['-77.031187', '38.981787', '1291.394531', '1.291394531', '0', '0.631460674', '0.082191781', '16.8468', '0.095975232', '661500', '-999', '0', '1', '0'], 
                         ['-77.031187', '38.981787', '1291.394531', '1.291394531', '0', '0.631460674', '0.082191781', '16.8468', '0.095975232', '661500', '-999', '0', '1', '0'], 
['-77.029687', '38.98177', '1164.989258', '1.164989258', '0', '0.631460674', '0.082191781', '16.8468', '0.095975232', '661500', '-999', '0', '0', '1'], 
['-77.029687', '38.98177', '1164.989258', '1.164989258', '0', '0.631460674', '0.082191781', '16.8468', '0.095975232', '661500', '-999', '0', '0', '1'], 
['-77.026548', '38.981752', '954.829834', '0.954829834', '0.20952381', '0.511727079', '0.111702128', '7.5278', '0.06234414', '599300', '5.813', '0', '1', '0'], 
['-77.026548', '38.981752', '954.829834', '0.954829834', '0.20952381', '0.511727079', '0.111702128', '7.5278', '0.06234414', '599300', '5.813', '0', '1', '0'],
 ['-77.056982', '38.981687', '3400.735352', '3.400735352', '0.659793814', '0.559782609', '0', '19.0089', '0.023450586', '807000', '-999', '0', '0', '1']])
    answers =  ['BURGLARY',
                'BURGLARY', 
                'ROBBERY', 
                'ROBBERY', 
                'THEFT', 
                'THEFT', 
                'THEFT']
    for i,test in enumerate(tests):
        print "Classifier predicts {0} and the actual answer is {1}".format(classifier.classify(test)[0], answers[i])
    
