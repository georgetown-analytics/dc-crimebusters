# -*- coding: utf-8 -*-
"""
Created on Tue Feb 17 21:31:48 2015
@author: andrew_woizesko
"""
###########################################################################
## Imports
###########################################################################

import dill
from conf import settings


###########################################################################
## Event Classifier
###########################################################################

class EventClassifier(object):
    """
    Class that will be used to classify user input
    events. The event classifier will use the model 
    from build.py
    """
    
    def __init__(self, model=None):
        """
        Initialize the event classifier with the model
        created in build.py
        """
        
    		## Get the default model from the settings if it isn't passed in
    	model = model or settings.model
    		
    		## Load the model from the pickle
    	with open(model, 'rb') as pkl:
    		self._classifier = dill.load(pkl)
    			
    
    def classify(self, instance):
        """
        This is the function that will take the user 
        input (instance) and return the probability that the 
        user will encounter a crime on their trip
        """
        		
    	## Use the classifier to predict the probabilities of each crime
    	most_likely = self._classifier.predict(instance)
     
    	return most_likely
    
    def get_model(self):
        """
        returns the model to the user to access all object functionality
        """
        return self._classifier
    

if __name__ == "__main__":
    import numpy as np
    
    classifier = EventClassifier()
    
    #sample data. Most of this will be generated by a form. 
    tests = np.asfarray([['-77.00589537', '38.90611936', '0.44015444', '0.505928854', '0.055153707', '0.944846293', '0.052631579', '0.295465729', '4.238', '7.7461', '8.412', '0', '1', '0'], ['-77.03382744', '38.93071433', '0.499459459', '0.59562212', '0.178443114', '0.821556886', '0.048104956', '0.351140991', '4.028', '4.4688', '12.755', '0', '1', '0'], ['-77.06697201', '38.90685672', '0.12755102', '0.452574526', '0.122916667', '0.877083333', '0', '1.583192993', '10.00001', '7.0388', '-999', '0', '1', '0'], ['-77.0646675', '38.94619085', '0.638018937', '0.588370314', '0.11689008', '0.88310992', '0', '0.323109894', '3.451', '7.6532', '6.505', '0', '1', '0']])
    answers =  ['THEFT/OTHER', 'ASSAULT W/DANGEROUS WEAPON', 'THEFT F/AUTO', 'THEFT/OTHER']
    for i,test in enumerate(tests):
        print "Classifier predicts {0} and the actual answer is {1}".format(classifier.classify(test)[0], answers[i])
    